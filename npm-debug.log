0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.36
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/michaelbrown/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Users/michaelbrown/.npm/react-bootstrap-native-slider/1.0.0/package.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /Users/michaelbrown/.npm/react-bootstrap-native-slider/1.0.0/package.tgz
12 verbose folder .
13 info prepublish react-bootstrap-native-slider@1.0.0
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/michaelbrown/.npm/1f1177db-tar.lock
16 silly lockFile 2af165de--native-slider-1-0-0-package-tgz tar:///Users/michaelbrown/.npm/react-bootstrap-native-slider/1.0.0/package.tgz
17 verbose lock tar:///Users/michaelbrown/.npm/react-bootstrap-native-slider/1.0.0/package.tgz /Users/michaelbrown/.npm/2af165de--native-slider-1-0-0-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 2af165de--native-slider-1-0-0-package-tgz tar:///Users/michaelbrown/.npm/react-bootstrap-native-slider/1.0.0/package.tgz
21 silly lockFile 2af165de--native-slider-1-0-0-package-tgz tar:///Users/michaelbrown/.npm/react-bootstrap-native-slider/1.0.0/package.tgz
22 silly lockFile 4c43e808-trap-native-slider-1-0-0-package /Users/michaelbrown/.npm/react-bootstrap-native-slider/1.0.0/package
23 verbose lock /Users/michaelbrown/.npm/react-bootstrap-native-slider/1.0.0/package /Users/michaelbrown/.npm/4c43e808-trap-native-slider-1-0-0-package.lock
24 silly lockFile 4c43e808-trap-native-slider-1-0-0-package /Users/michaelbrown/.npm/react-bootstrap-native-slider/1.0.0/package
25 silly lockFile 4c43e808-trap-native-slider-1-0-0-package /Users/michaelbrown/.npm/react-bootstrap-native-slider/1.0.0/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'react-bootstrap-native-slider',
28 silly publish   version: '1.0.0',
28 silly publish   description: 'Native Slider with Boostrap Slider failover component for React',
28 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
28 silly publish   repository:
28 silly publish    { type: 'git',
28 silly publish      url: 'https://github.com/brownieboy/react.bootstrap.slidertest.git' },
28 silly publish   keywords: [ 'react-component', 'react', 'slider', 'component', 'bootstrap' ],
28 silly publish   bugs: { url: 'https://github.com/brownieboy/react.bootstrap.slidertest/issues' },
28 silly publish   author: { name: 'Michael Brown', email: 'brownieboy@gmail.com' },
28 silly publish   license: 'MIT',
28 silly publish   dependencies:
28 silly publish    { react: '^0.12.1',
28 silly publish      jquery: '^1',
28 silly publish      bootstrap: '^3.1',
28 silly publish      'bootstrap-slider': '^4' },
28 silly publish   readme: '# React Bootstrap Native Slider\n\n###Overview\nA ReactJS wrapper for the HTML5 input type="range" slider component, but using [seiyria\'s Bootstrap Slider component](https://github.com/seiyria/bootstrap-slider) as a polyfill where the HTML5 version is not available (IE 9) or otherwise suffers from a problematic implementation (any other version of IE).\n\n\n###Background\nI like the HTML5 native range control, especially how easy it is manipulate via [ReactJS](http://facebook.github.io/react/), my current favourite JavaScript library.\n\nHere\'s how the native JavaScript control is rendered in my plug-in:\n\n```JavaScript\n    render: function () {\n        return (\n            <input id="mySlider"\n                type="range"\n                value={this.props.value}\n                min={this.props.min}\n                max={this.props.max}\n                onInput={this.props.handleChange}\n                step={this.props.step} />\n        );\n    }\n```\n\nIt\'s about as simple a rendering as you could want in React.  You\'d pass some props into your component, and render them as the corresponding attributes on the input field.  Sweet as!\n\nBut knock me down with a feather if there aren\'t problems with IE.\n\n\n####Internet Explorer Problems\n\n#####Range control not supported on IE9\nAs the heading says, the &lt;input type="range"&gt; HTML5 element simply isn\'t supported on IE 9 and below.  It will actually display as a type="text" element, so instead of slider, you\'ll get a text box with a number in it.\n\nThis is what prompted me to create a React control that would fall back to the Bootstr-ap Slider for browsers that didn\'t support the &lt;input type="range"&gt; element.\n\nAs we all know, browser sniffing is evil, so I found this bit of code (can\'t remember where) to feature detect the presence of the input type="range" element:\n\n```JavaScript\nvar input = document.createElement(\'input\');\ninput.setAttribute(\'type\', \'range\');\nthis.supportsRange = input.type !== "text" ? true : false;\n```\n\nIf you create such an element via JavaScript, and then read its "type" attribute, it will return "text" if the element is not supported.\n\nSweet, I could now insert the Bootstrap Slider for browsers that don\'t support the native slider element.  Which is when I ran into my second set of IE problems.\n\n\n\n#####Change and Input events don\'t work correctly on IE 10 & 11\nApparently, the initial spec for the HTML5 range input element was defined rather vaguely.  In particular, it wasn\'t clear that the it\'s actually the Input event (\'onInput\' in ReactJS) that coders should look at to see if the user has moved the slider.  Whereas the Change event (\'onChange\' in ReactJS) is to be triggered only when the user has actually *comitted* their change - i.e they\'ve let go of the slider.  The Impressive Webs site has [a more detailed explanation of how the range slider events work](http://www.impressivewebs.com/onchange-vs-oninput-for-range-sliders/).\n\nIn my testing with ReactJS, the two events work in the same way: they both fire when the user moves the slider, and not when (s)he\'s let go of it.  Except for IE, which as ever, goes its own way.  \n\nIn my testing, I couldn\'t get IE 10 to respond correctly to either event with ReactJS.  I\'m not sure if this is a ReactJS issue or an IE issue or a mixture of both.  There\'s [a discussion of the issue on React\'s Github Issues section](https://github.com/facebook/react/issues/3096) and [another one here](https://github.com/facebook/react/issues/554).  I was going to try coding around this issue for IE, but decided not to because...\n\n\n\n#####The HTML5 slider looks crap on IE!\nCheck the **oninput in IE11** video on [that Impressive Webs article](http://www.impressivewebs.com/onchange-vs-oninput-for-range-sliders/).  It may be my personal preference, but doesn\'t the IE version of the HTML5 range slider look just bloody awful to you?\n\nIt\'s not just ugly, IMHO.  It\'s inpractical too.  See how the handler (the bit on the control that you actually slide) is the same height as the rest of the sider?  Only IE does it this way.  Other browsers display a handler that is much more prominent, so its easier to pick out with your eye, not to mention with your finger if you\'re on a tablet.  (Thankfully, the latter would only ever be an issue on Microsoft tablets, and seeing as they\'ve sold about a dozen of these through the known universe, I guess that\'s not a major problem!.)\n\nIn the end, I made an executive decision in my React Bootstrap Slider component: I don\'t display the native HTML5 slider control on IE.  At least not for IE 10 or IE 11.  IE 12 is, apparently, a whole new ball game - it looks like Microsoft is ditching the much loved (not!) Trident rendering engine for Webkit.  I\'ve not actually tested it on IE 12, but I\'ve given it the benefit of the doubt, and will display the native control there.\n\nThis means that I\'ve had to implement some nasty, browser-sniffing code after all, and I\'ve implemented this as a ReactJS mixin, BrowserDetectMixin.  The mixin will report back IE version numbers up to version 12.  The component code will then display the Bootstrap Slider for IE 10 and IE 11.  For all other browsers, it will then do the feature detection thing, displaying the native HTML5 slider for those browsers that support it, and the Bootstrap Slider for those that don\'t!\n\n\n###Requirements\n- [ReactJS](http://facebook.github.io/react/).  Of course.\n- [jQuery](http://jquery.com/).  I\'ll look at a non-jQuery version soon.  It shouldn\'t be too hard\n- [Bootstrap 3](http://getbootstrap.com/), the JavaScript and the CSS\n- [Seiyria\'s Bootstrap Slider](https://github.com/seiyria/bootstrap-slider), again the JavaScript and the CSS\n- react-native-bootstrap-slider.js and browserdetect-mixin.js from this repository\n\n\n\n###How to use\nYou can follow the example code in the app.jsx file to see how to use.\n\nThe component is called SliderNativeBootstrap.  Here\'s an example of how you might call it in your ReactJS\'s render method:\n\n```JavaScript\n<SliderNativeBootstrap\n    value={this.state.currentValue}\n    handleChange={this.changeValue}\n    step={this.state.step}\n    max={this.state.max}\n    min={this.state.min}\n    disabled="disabled" />\n    }\n```\n\nThe **value**, **step**, **max** and **min** parameters should be self-explanatory.  handleChange is the callback method that will be called when the slider actually changes.  (NB: this is the onInput event for the native HTML5 control, and the "change" event for the Bootstrap slider.)\n\nIf the optional parameter **disabled** is included, and is set to "disabled", then the slider will display in a disabled state.  If the parameter is not included, or is set to anything else except "disabled", then the slider control will be enabled. \n\n\n####Forcing the Bootstrap version all the time\nAn optional parameter is **polyfill**.  When set to **true** (the default if you leave the parameter out) the component acts as I\'ve described it above, i.e. displaying the HTML5 native slider for these browsers that support it properly, and the Bootstrap version for those that don\'t.  If you want to force the use of the Bootstrap slider for *all* browsers then you should set this parameter to **false**, like so:\n\n```JavaScript\n<SliderNativeBootstrap\n\tpolyfill={false}\n    value={this.state.currentValue}\n    handleChange={this.changeValue}\n    step={this.state.step}\n    max={this.state.max}\n    min={this.state.min} />\n```\nAlternatively, you could just the BootstrapSlider component instead.  It takes the same paramaters as SliderNativeBootstrap, except of course, for the **polyfill** parameter:\n\n```JavaScript\n<BootstrapSlider\n    value={this.state.currentValue}\n    handleChange={this.changeValue}\n    step={this.state.step}\n    max={this.state.max}\n    min={this.state.min} />\n```\n\n\n###Demo\nIs [here](http://users.on.net/~mikeandgeminoz/code/react.bootstrap.slidertest/index.html).\n\nOn load, the slider range is 1,000 to 20,000 with a step of 1,000.\n\nClick on the **Change axes!** button, and the slider range changes from 0 to 2,000 with a step of 100.\n\n\n###Future work\n[Seiyria\'s Bootstrap Slider](https://github.com/seiyria/bootstrap-slider) component has many other options and parameters, of course.  I can look at rolling some of those into my compnent if anybody has a need for them.  I\'ve kept it nice and simple for this initial version though.\n\nI\'ll be putting the component on [npm](https://www.npmjs.com/), and thereby the [React Components site](http://react-components.com/) just as soon as I work out how to do it!\n\n\n\n\n\n\n\n\n\n\n\n\n\n',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   gitHead: 'd376d8ef8dab6b84cac6501716c34a2ff812f668',
28 silly publish   homepage: 'https://github.com/brownieboy/react.bootstrap.slidertest',
28 silly publish   _id: 'react-bootstrap-native-slider@1.0.0',
28 silly publish   _shasum: '2af678c7998a23de52677e8cfb23f4f73fbcd5fc',
28 silly publish   _from: '.' }
29 verbose request where is /react-bootstrap-native-slider
30 verbose request registry https://registry.npmjs.org/
31 verbose request id fe8a36fbacb9e0dd
32 verbose url raw /react-bootstrap-native-slider
33 verbose url resolving [ 'https://registry.npmjs.org/',
33 verbose url resolving   './react-bootstrap-native-slider' ]
34 verbose url resolved https://registry.npmjs.org/react-bootstrap-native-slider
35 verbose request where is https://registry.npmjs.org/react-bootstrap-native-slider
36 info trying registry request attempt 1 at 20:34:23
37 http PUT https://registry.npmjs.org/react-bootstrap-native-slider
38 http 502 https://registry.npmjs.org/react-bootstrap-native-slider
39 verbose bad json <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
39 verbose bad json <html><head>
39 verbose bad json <title>502 Bad Gateway</title>
39 verbose bad json </head><body>
39 verbose bad json <h1>Bad Gateway</h1>
39 verbose bad json <p>The proxy server received an invalid
39 verbose bad json response from an upstream server.<br />
39 verbose bad json </p>
39 verbose bad json </body></html>
40 error registry error parsing json
41 info retry will retry, error on last attempt: SyntaxError: Unexpected token <
41 info retry <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
41 info retry <html><head>
41 info retry <title>502 Bad Gateway</title>
41 info retry </head><body>
41 info retry <h1>Bad Gateway</h1>
41 info retry <p>The proxy server received an invalid
41 info retry response from an upstream server.<br />
41 info retry </p>
41 info retry </body></html>
42 info trying registry request attempt 2 at 20:34:37
43 http PUT https://registry.npmjs.org/react-bootstrap-native-slider
44 http 403 https://registry.npmjs.org/react-bootstrap-native-slider
45 verbose headers { date: 'Wed, 11 Mar 2015 09:34:41 GMT',
45 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
45 verbose headers   'content-type': 'application/json',
45 verbose headers   'cache-control': 'max-age=60',
45 verbose headers   'content-length': '12326',
45 verbose headers   'accept-ranges': 'bytes',
45 verbose headers   via: '1.1 varnish',
45 verbose headers   'x-served-by': 'cache-syd1621-SYD',
45 verbose headers   'x-cache': 'MISS',
45 verbose headers   'x-cache-hits': '0',
45 verbose headers   'x-timer': 'S1426066477.671285,VS0,VE3842',
45 verbose headers   'keep-alive': 'timeout=10, max=50',
45 verbose headers   connection: 'Keep-Alive' }
46 error publish Failed PUT 403
47 error Error: forbidden cannot modify pre-existing version: 1.0.0
47 error old={"name":"react-bootstrap-native-slider","version":"1.0.0","description":"Native Slider with Boostrap Slider failover component for React","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"https://github.com/brownieboy/react.bootstrap.slidertest.git"},"keywords":["react-component","react","slider","component","bootstrap"],"bugs":{"url":"https://github.com/brownieboy/react.bootstrap.slidertest/issues"},"author":{"name":"Michael Brown","email":"brownieboy@gmail.com"},"license":"MIT","dependencies":{"react":"^0.12.1","jquery":"^1","bootstrap":"^3.1","bootstrap-slider":"^4"},"gitHead":"d376d8ef8dab6b84cac6501716c34a2ff812f668","homepage":"https://github.com/brownieboy/react.bootstrap.slidertest","_id":"react-bootstrap-native-slider@1.0.0","_shasum":"2b9b7b1181e225356c27dc81adbc631d0424ef89","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"brownieboy","email":"brownieboy@gmail.com"},"maintainers":[{"name":"brownieboy","email":"brownieboy@gmail.com"}],"dist":{"shasum":"2b9b7b1181e225356c27dc81adbc631d0424ef89","tarball":"http://registry.npmjs.org/react-bootstrap-native-slider/-/react-bootstrap-native-slider-1.0.0.tgz"}}
47 error new={"name":"react-bootstrap-native-slider","version":"1.0.0","description":"Native Slider with Boostrap Slider failover component for React","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"https://github.com/brownieboy/react.bootstrap.slidertest.git"},"keywords":["react-component","react","slider","component","bootstrap"],"bugs":{"url":"https://github.com/brownieboy/react.bootstrap.slidertest/issues"},"author":{"name":"Michael Brown","email":"brownieboy@gmail.com"},"license":"MIT","dependencies":{"react":"^0.12.1","jquery":"^1","bootstrap":"^3.1","bootstrap-slider":"^4"},"readme":"# React Bootstrap Native Slider\u000a\u000a###Overview\u000aA ReactJS wrapper for the HTML5 input type=\"range\" slider component, but using [seiyria's Bootstrap Slider component](https://github.com/seiyria/bootstrap-slider) as a polyfill where the HTML5 version is not available (IE 9) or otherwise suffers from a problematic implementation (any other version of IE).\u000a\u000a\u000a###Background\u000aI like the HTML5 native range control, especially how easy it is manipulate via [ReactJS](http://facebook.github.io/react/), my current favourite JavaScript library.\u000a\u000aHere's how the native JavaScript control is rendered in my plug-in:\u000a\u000a```JavaScript\u000a    render: function () {\u000a        return (\u000a            <input id=\"mySlider\"\u000a                type=\"range\"\u000a                value={this.props.value}\u000a                min={this.props.min}\u000a                max={this.props.max}\u000a                onInput={this.props.handleChange}\u000a                step={this.props.step} />\u000a        );\u000a    }\u000a```\u000a\u000aIt's about as simple a rendering as you could want in React.  You'd pass some props into your component, and render them as the corresponding attributes on the input field.  Sweet as!\u000a\u000aBut knock me down with a feather if there aren't problems with IE.\u000a\u000a\u000a####Internet Explorer Problems\u000a\u000a#####Range control not supported on IE9\u000aAs the heading says, the &lt;input type=\"range\"&gt; HTML5 element simply isn't supported on IE 9 and below.  It will actually display as a type=\"text\" element, so instead of slider, you'll get a text box with a number in it.\u000a\u000aThis is what prompted me to create a React control that would fall back to the Bootstr-ap Slider for browsers that didn't support the &lt;input type=\"range\"&gt; element.\u000a\u000aAs we all know, browser sniffing is evil, so I found this bit of code (can't remember where) to feature detect the presence of the input type=\"range\" element:\u000a\u000a```JavaScript\u000avar input = document.createElement('input');\u000ainput.setAttribute('type', 'range');\u000athis.supportsRange = input.type !== \"text\" ? true : false;\u000a```\u000a\u000aIf you create such an element via JavaScript, and then read its \"type\" attribute, it will return \"text\" if the element is not supported.\u000a\u000aSweet, I could now insert the Bootstrap Slider for browsers that don't support the native slider element.  Which is when I ran into my second set of IE problems.\u000a\u000a\u000a\u000a#####Change and Input events don't work correctly on IE 10 & 11\u000aApparently, the initial spec for the HTML5 range input element was defined rather vaguely.  In particular, it wasn't clear that the it's actually the Input event ('onInput' in ReactJS) that coders should look at to see if the user has moved the slider.  Whereas the Change event ('onChange' in ReactJS) is to be triggered only when the user has actually *comitted* their change - i.e they've let go of the slider.  The Impressive Webs site has [a more detailed explanation of how the range slider events work](http://www.impressivewebs.com/onchange-vs-oninput-for-range-sliders/).\u000a\u000aIn my testing with ReactJS, the two events work in the same way: they both fire when the user moves the slider, and not when (s)he's let go of it.  Except for IE, which as ever, goes its own way.  \u000a\u000aIn my testing, I couldn't get IE 10 to respond correctly to either event with ReactJS.  I'm not sure if this is a ReactJS issue or an IE issue or a mixture of both.  There's [a discussion of the issue on React's Github Issues section](https://github.com/facebook/react/issues/3096) and [another one here](https://github.com/facebook/react/issues/554).  I was going to try coding around this issue for IE, but decided not to because...\u000a\u000a\u000a\u000a#####The HTML5 slider looks crap on IE!\u000aCheck the **oninput in IE11** video on [that Impressive Webs article](http://www.impressivewebs.com/onchange-vs-oninput-for-range-sliders/).  It may be my personal preference, but doesn't the IE version of the HTML5 range slider look just bloody awful to you?\u000a\u000aIt's not just ugly, IMHO.  It's inpractical too.  See how the handler (the bit on the control that you actually slide) is the same height as the rest of the sider?  Only IE does it this way.  Other browsers display a handler that is much more prominent, so its easier to pick out with your eye, not to mention with your finger if you're on a tablet.  (Thankfully, the latter would only ever be an issue on Microsoft tablets, and seeing as they've sold about a dozen of these through the known universe, I guess that's not a major problem!.)\u000a\u000aIn the end, I made an executive decision in my React Bootstrap Slider component: I don't display the native HTML5 slider control on IE.  At least not for IE 10 or IE 11.  IE 12 is, apparently, a whole new ball game - it looks like Microsoft is ditching the much loved (not!) Trident rendering engine for Webkit.  I've not actually tested it on IE 12, but I've given it the benefit of the doubt, and will display the native control there.\u000a\u000aThis means that I've had to implement some nasty, browser-sniffing code after all, and I've implemented this as a ReactJS mixin, BrowserDetectMixin.  The mixin will report back IE version numbers up to version 12.  The component code will then display the Bootstrap Slider for IE 10 and IE 11.  For all other browsers, it will then do the feature detection thing, displaying the native HTML5 slider for those browsers that support it, and the Bootstrap Slider for those that don't!\u000a\u000a\u000a###Requirements\u000a- [ReactJS](http://facebook.github.io/react/).  Of course.\u000a- [jQuery](http://jquery.com/).  I'll look at a non-jQuery version soon.  It shouldn't be too hard\u000a- [Bootstrap 3](http://getbootstrap.com/), the JavaScript and the CSS\u000a- [Seiyria's Bootstrap Slider](https://github.com/seiyria/bootstrap-slider), again the JavaScript and the CSS\u000a- react-native-bootstrap-slider.js and browserdetect-mixin.js from this repository\u000a\u000a\u000a\u000a###How to use\u000aYou can follow the example code in the app.jsx file to see how to use.\u000a\u000aThe component is called SliderNativeBootstrap.  Here's an example of how you might call it in your ReactJS's render method:\u000a\u000a```JavaScript\u000a<SliderNativeBootstrap\u000a    value={this.state.currentValue}\u000a    handleChange={this.changeValue}\u000a    step={this.state.step}\u000a    max={this.state.max}\u000a    min={this.state.min}\u000a    disabled=\"disabled\" />\u000a    }\u000a```\u000a\u000aThe **value**, **step**, **max** and **min** parameters should be self-explanatory.  handleChange is the callback method that will be called when the slider actually changes.  (NB: this is the onInput event for the native HTML5 control, and the \"change\" event for the Bootstrap slider.)\u000a\u000aIf the optional parameter **disabled** is included, and is set to \"disabled\", then the slider will display in a disabled state.  If the parameter is not included, or is set to anything else except \"disabled\", then the slider control will be enabled. \u000a\u000a\u000a####Forcing the Bootstrap version all the time\u000aAn optional parameter is **polyfill**.  When set to **true** (the default if you leave the parameter out) the component acts as I've described it above, i.e. displaying the HTML5 native slider for these browsers that support it properly, and the Bootstrap version for those that don't.  If you want to force the use of the Bootstrap slider for *all* browsers then you should set this parameter to **false**, like so:\u000a\u000a```JavaScript\u000a<SliderNativeBootstrap\u000a\u0009polyfill={false}\u000a    value={this.state.currentValue}\u000a    handleChange={this.changeValue}\u000a    step={this.state.step}\u000a    max={this.state.max}\u000a    min={this.state.min} />\u000a```\u000aAlternatively, you could just the BootstrapSlider component instead.  It takes the same paramaters as SliderNativeBootstrap, except of course, for the **polyfill** parameter:\u000a\u000a```JavaScript\u000a<BootstrapSlider\u000a    value={this.state.currentValue}\u000a    handleChange={this.changeValue}\u000a    step={this.state.step}\u000a    max={this.state.max}\u000a    min={this.state.min} />\u000a```\u000a\u000a\u000a###Demo\u000aIs [here](http://users.on.net/~mikeandgeminoz/code/react.bootstrap.slidertest/index.html).\u000a\u000aOn load, the slider range is 1,000 to 20,000 with a step of 1,000.\u000a\u000aClick on the **Change axes!** button, and the slider range changes from 0 to 2,000 with a step of 100.\u000a\u000a\u000a###Future work\u000a[Seiyria's Bootstrap Slider](https://github.com/seiyria/bootstrap-slider) component has many other options and parameters, of course.  I can look at rolling some of those into my compnent if anybody has a need for them.  I've kept it nice and simple for this initial version though.\u000a\u000aI'll be putting the component on [npm](https://www.npmjs.com/), and thereby the [React Components site](http://react-components.com/) just as soon as I work out how to do it!\u000a\u000a\u000a\u000a\u000a\u000a\u000a\u000a\u000a\u000a\u000a\u000a\u000a\u000a","readmeFilename":"README.md","gitHead":"d376d8ef8dab6b84cac6501716c34a2ff812f668","homepage":"https://github.com/brownieboy/react.bootstrap.slidertest","_id":"react-bootstrap-native-slider@1.0.0","_shasum":"2af678c7998a23de52677e8cfb23f4f73fbcd5fc","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"brownieboy","email":"brownieboy@gmail.com"},"maintainers":[{"name":"brownieboy","email":"brownieboy@gmail.com"}],"dist":{"shasum":"2af678c7998a23de52677e8cfb23f4f73fbcd5fc","tarball":"http://registry.npmjs.org/react-bootstrap-native-slider/-/react-bootstrap-native-slider-1.0.0.tgz"}}: react-bootstrap-native-slider
47 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:308:14)
47 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:246:65)
47 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:236:22)
47 error     at Request.emit (events.js:98:17)
47 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1142:14)
47 error     at Request.emit (events.js:117:20)
47 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1096:12)
47 error     at IncomingMessage.emit (events.js:117:20)
47 error     at _stream_readable.js:944:16
47 error     at process._tickCallback (node.js:442:13)
48 error If you need help, you may report this *entire* log,
48 error including the npm and node versions, at:
48 error     <http://github.com/npm/npm/issues>
49 error System Darwin 14.1.0
50 error command "node" "/usr/local/bin/npm" "publish"
51 error cwd /Users/michaelbrown/Documents/Aptana Studio 3 Workspace/react.bootstrap.slidertest
52 error node -v v0.10.36
53 error npm -v 1.4.28
54 verbose exit [ 1, true ]
